plugins {
    id 'groovy'
    id 'org.grails.grails-web'
    id 'org.grails.grails-gsp'
    id 'com.github.erdi.webdriver-binaries'
    id 'war'
    id 'application'
    id 'idea'
    id 'eclipse'
    id 'com.github.node-gradle.node'
}

group = 'io.github.matrei'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    configureEach {
        //resolutionStrategy.force 'org.codehaus.groovy:groovy-xml:3.0.13'
        resolutionStrategy.eachDependency { DependencyResolveDetails details->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion '4.10.0'
            }
        }
    }
}

// This is used for testing with local copy of the Grails Inertia Plugin
// (comment out the dependency in the dependencies block)
// Also see section in settings.gradle
/*
grails {
    plugins {
        implementation project(':grails-inertia-plugin')
    }
}
*/
dependencies {
    implementation 'org.grails:grails-core'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-web-boot'
    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:hibernate5'
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation 'io.github.matrei:grails-inertia-plugin:2.0.0'
    implementation 'org.grails.plugins:spring-security-core:6.0.0'
    implementation 'org.grails.plugins:gorm-logical-delete:2.0.0.M2'
    implementation 'net.datafaker:datafaker:1.8.0'
    implementation 'dev.nicklasw:squiggly-filter-jackson:2.0.0'
    implementation 'com.drewnoakes:metadata-extractor:2.18.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    implementation 'org.grails.plugins:async'
    //implementation 'org.grails.plugins:events'
    //implementation project(':grails-inertia-plugin')
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    console 'org.grails:grails-console'
    //profile 'org.grails.profiles:web'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.apache.tomcat:tomcat-jdbc'
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.grails:grails-web-testing-support'
    testImplementation 'org.grails.plugins:geb'
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'io.micronaut:micronaut-http-client'
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
}

application {
    mainClass.set 'pingcrm.Application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(Test).configureEach {

    useJUnitPlatform()

    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}

tasks.withType(War).configureEach { War war ->
    war.dependsOn compileGroovyPages
}
webdriverBinaries {
    chromedriver '110.0.5481.77'
    geckodriver '0.32.2'
    edgedriver '110.0.1587.57'
}


node {
    download = true
}

tasks.register('viteBuild', NpmTask) {
    dependsOn 'npmInstall'
    group = 'build'
    description = 'Build the client bundle'
    args = ['run', 'build']
}

processResources.dependsOn 'viteBuild'