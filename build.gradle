import com.github.gradle.node.npm.task.NpmTask

plugins {

    id 'eclipse'
    id 'idea'

    id 'groovy'
    id 'war'
    id 'application'

    id 'org.grails.grails-web'
    id 'org.grails.grails-gsp'

    id 'com.github.erdi.webdriver-binaries'
    id 'com.github.node-gradle.node'
}

group = 'io.github.matrei'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://repo.grails.org/grails/core' }
}

// This is used for testing with local copy of the Grails Inertia Plugin
// (comment out the dependency in the dependencies block)
// Also see section in settings.gradle
/*
grails {
    plugins {
        implementation project(':grails-inertia-plugin')
    }
}
*/
dependencies {

    implementation 'org.grails:grails-core'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-controllers'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-web-boot'

    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:views-json'
    implementation 'org.grails.plugins:hibernate5'
    implementation libs.grails.events
    implementation libs.grails.spring.security.core
    implementation libs.bundles.spring.security
    implementation libs.grails.gorm.logical.delete
    implementation libs.grails.inertia
    //implementation project(':grails-inertia-plugin')

    implementation libs.hibernate.core

    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation libs.bundles.groovy
    implementation libs.snakeyaml

    implementation libs.datafaker
    implementation libs.squiggly
    implementation libs.metadata.extractor
    implementation libs.imgscalr

    compileOnly 'io.micronaut:micronaut-inject-groovy'

    console 'org.grails:grails-console'

    runtimeOnly libs.h2database
    runtimeOnly libs.hikari

    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.grails:grails-web-testing-support'
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'io.micronaut:micronaut-http-client'
    testImplementation libs.groovy.test

    integrationTestImplementation 'org.grails.plugins:geb'
    integrationTestImplementation libs.bundles.geb

    integrationTestRuntimeOnly libs.bundles.selenium
}

application {
    mainClass = 'pingcrm.Application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

tasks.withType(Test).configureEach {

    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }

    systemProperty 'geb.env', System.getProperty('geb.env')
    systemProperty 'geb.build.reportsDir', reporting.file('geb/integrationTest')
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}

webdriverBinaries {
    chromedriver {
        version = '110.0.5481.77'
        fallbackTo32Bit = true
    }
    geckodriver = '0.32.2'
    edgedriver = '110.0.1587.57'
}

node {
    download = true
}

tasks.register('viteBuild', NpmTask) {
    description = 'Build the client bundle'
    group = 'build'

    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src/main/javascript'))
    inputs.files('package.json', 'vite.config.js', 'tailwind.config.js', 'postcss.config.js', 'babel.config.js', 'jsconfig.json')

    it.args = ['run', 'build']

    outputs.dir('src/main/resources/public/dist')

    dependsOn 'npmInstall'
}

tasks.register('copyNodeModulesForSsr', Copy) {
    group = 'build'
    description = 'Copy node_modules for SSR'

    from 'node_modules'
    into 'build/resources/main/node_modules'

    dependsOn 'npmInstall'
}

tasks.named('processResources') {
    dependsOn 'viteBuild', 'copyNodeModulesForSsr'
}