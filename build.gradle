buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'org.grails.plugins:hibernate5:7.3.0'
        classpath 'gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.7'
        classpath 'org.ysb33r.gradle:grolifant50:2.0.0-alpha.6' // this is used to be able to run webdriver on java 17 https://github.com/erdi/webdriver-binaries-gradle-plugin/issues/30#issuecomment-1378906611
        classpath 'com.github.node-gradle:gradle-node-plugin:3.4.0'
    }
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.grails.grails-web'
apply plugin: 'com.github.erdi.webdriver-binaries'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'com.github.node-gradle.node'

group 'io.github.matrei'

sourceCompatibility = JavaVersion.toVersion 17
targetCompatibility = JavaVersion.toVersion 17

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

// This is used for testing with local copy of the Grails Inertia Plugin
// (comment out the dependency in the dependencies block)
// Also see section in settings.gradle
/*
grails {
    plugins {
        implementation project(':grails-inertia-plugin')
    }
}
*/

// Grails 5.3.0 declares to use Spring Boot 2.7.8 (but actually pulls in 2.7.5) which in turn
// pulls in Spring Security Core 5.7.4 (CVE issues prior to 5.7.5)
// Also the Grails Spring Security Core Plugin 5.2.0 uses Spring Security Core 5.8.1
ext['spring-security.version'] = '5.8.1'

// Spring Boot Starter Validation 2.7.8 pulls in Snake Yaml 1.30 which has several CVE issues
// (although should not be a problem if it isn't used to process user generated input)
ext['snakeyaml.version'] = '1.33'

dependencies {
    //developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    console 'org.grails:grails-console'
    implementation "org.springframework.boot:spring-boot-starter-logging:$springBootVersion"
    implementation 'org.grails:grails-core'
    implementation "org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion"
    implementation 'org.grails:grails-web-boot'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails.plugins:async'
    implementation 'org.grails.plugins:hibernate5'
    implementation 'org.hibernate:hibernate-core:5.6.11.Final'
    //implementation 'org.grails.plugins:events'
    implementation 'org.grails.plugins:gsp'
    //implementation project(':grails-inertia-plugin')
    implementation 'io.github.matrei:grails-inertia-plugin:1.1.0'
    implementation 'org.grails.plugins:spring-security-core:5.2.0'
    implementation 'org.grails.plugins:gorm-logical-delete:2.0.0.M2'
    implementation 'net.datafaker:datafaker:1.7.0'
    implementation 'dev.nicklasw:squiggly-filter-jackson:2.0.0'
    implementation 'com.drewnoakes:metadata-extractor:2.18.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    profile 'org.grails.profiles:web'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.apache.tomcat:tomcat-jdbc'
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.grails:grails-web-testing-support'
    testImplementation 'org.grails.plugins:geb'
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
}

springBoot.mainClass = 'pingcrm.Application'
bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile).configureEach {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        chromedriver {
            version = '2.45.0'
            fallbackTo32Bit = true
        }
        geckodriver '0.32.0'
    }
}

tasks.withType(Test).configureEach {

    useJUnitPlatform()

    systemProperty 'geb.env', System.getProperty('geb.env')
    systemProperty 'geb.build.reportsDir', reporting.file('geb/integrationTest')
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', '${System.getenv('CHROMEWEBDRIVER')}/chromedriver'
        systemProperty 'webdriver.gecko.driver', '${System.getenv('GECKOWEBDRIVER')}/geckodriver'
    }
}

node {
    download = true
}

tasks.register('viteBuild', NpmTask) {
    dependsOn 'npmInstall'
    group = 'build'
    description = 'Build the client bundle'
    args = ['run', 'build']
}

processResources.dependsOn 'viteBuild'